//
//  FMCControlView.swift
//  WinwingDesktop
//
//  Created by Ramon Swilem on 15/08/2025.
//

import SwiftUI

struct FMCControlView: View {
    let device: WinwingDevice
    @State private var backlight: Double = 0
    @State private var screenBacklight: Double = 0
    @State private var overallLedsBrightness: Double = 0
    
    // LED states for FMC indicators
    @State private var ledStates: [Bool] = Array(repeating: false, count: 17)
    @State private var selectedTestPage: String = "INIT";
    @State private var selectedFont: FMCWrapper.FontType = .b612
    
    private let indicatorLEDs: [(id: Int, name: String)] = [
        (8, "FAIL"), (9, "FM"), (10, "MCDU"), (11, "MENU"), 
        (12, "FM1"), (13, "IND"), (14, "RDY"), (15, "STATUS"), (16, "FM2")
    ]
    
    var body: some View {
        VStack(alignment: .leading, spacing: 20) {
            Text("FMC Controls")
                .font(.headline)
                .padding(.top, 8)
            
            // Backlight Controls
            VStack(alignment: .leading, spacing: 12) {
                Text("Backlights")
                    .font(.subheadline)
                    .fontWeight(.medium)
                
                HStack(alignment: .center, spacing: 16) {
                    Text("Backlight")
                        .frame(width: 100, alignment: .leading)
                    Slider(value: $backlight, in: 0...255, step: 1)
                        .frame(width: 160)
                    Text("\(Int(backlight))")
                        .frame(width: 36, alignment: .trailing)
                    Button(action: { setBacklight() }) {
                        Text("Set")
                    }
                    .buttonStyle(.bordered)
                }
                
                HStack(alignment: .center, spacing: 16) {
                    Text("Screen Backlight")
                        .frame(width: 100, alignment: .leading)
                    Slider(value: $screenBacklight, in: 0...255, step: 1)
                        .frame(width: 160)
                    Text("\(Int(screenBacklight))")
                        .frame(width: 36, alignment: .trailing)
                    Button(action: { setScreenBacklight() }) {
                        Text("Set")
                    }
                    .buttonStyle(.bordered)
                }
                
                HStack(alignment: .center, spacing: 16) {
                    Text("Overall LEDs")
                        .frame(width: 100, alignment: .leading)
                    Slider(value: $overallLedsBrightness, in: 0...255, step: 1)
                        .frame(width: 160)
                    Text("\(Int(overallLedsBrightness))")
                        .frame(width: 36, alignment: .trailing)
                    Button(action: { setOverallLedsBrightness() }) {
                        Text("Set")
                    }
                    .buttonStyle(.bordered)
                }
            }
            
            Divider()
                .padding(.vertical, 8)
            
            // LED Controls
            VStack(alignment: .leading, spacing: 12) {
                Text("Indicator LEDs")
                    .font(.subheadline)
                    .fontWeight(.medium)
                
                LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 3), spacing: 8) {
                    ForEach(indicatorLEDs, id: \.id) { led in
                        Toggle(led.name, isOn: Binding(
                            get: { ledStates[led.id] },
                            set: { value in
                                ledStates[led.id] = value
                                setLED(led.id, state: value)
                            }
                        ))
                        .toggleStyle(.switch)
                        .controlSize(.mini)
                    }
                }
                
                HStack {
                    Button("All On") {
                        for led in indicatorLEDs {
                            ledStates[led.id] = true
                            setLED(led.id, state: true)
                        }
                    }
                    .buttonStyle(.bordered)
                    
                    Button("All Off") {
                        for led in indicatorLEDs {
                            ledStates[led.id] = false
                            setLED(led.id, state: false)
                        }
                    }
                    .buttonStyle(.bordered)
                    
                    Spacer()
                }
                .padding(.top, 8)
            }
            
            Divider()
                .padding(.vertical, 8)
            
            // Display Controls
            VStack(alignment: .leading, spacing: 12) {
                Text("Display Controls")
                    .font(.subheadline)
                    .fontWeight(.medium)
                
                HStack {
                    Button("Clear Display") {
                        clearDisplay()
                    }
                    .buttonStyle(.bordered)
                    
                    Button("Show all glyphs") {
                        showAllGlyphs()
                    }
                    .buttonStyle(.bordered)
                    
                    Spacer()
                }
                
                // Font selection
                VStack(alignment: .leading, spacing: 8) {
                    Text("Font Selection")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    
                    HStack {
                        Picker("Font", selection: $selectedFont) {
                            ForEach(FMCWrapper.FontType.allCases, id: \.self) { font in
                                Text(font.displayName).tag(font)
                            }
                        }
                        .pickerStyle(.menu)
                        .frame(width: 150)
                        
                        Button("Set Font") {
                            setFont()
                        }
                        .buttonStyle(.bordered)
                        
                        Spacer()
                    }
                }
                
                // Test page selection
                VStack(alignment: .leading, spacing: 8) {
                    Text("Test Pages")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    
                    Picker("Test Page", selection: $selectedTestPage) {
                        Text("INIT").tag("INIT")
                        Text("PREFLIGHT").tag("PREFLIGHT")
                    }
                    .pickerStyle(.menu)
                    .frame(width: 200)
                    
                    Button("Show Test Page") {
                        showTestPage()
                    }
                    .buttonStyle(.bordered)
                }
            }
            
            Spacer()
        }
        .padding()
        .onAppear(perform: viewDidAppear)
    }
    
    // MARK: - Control Functions
    
    private func viewDidAppear() {
        device.update()
        setDatarefFloat("AirbusFBW/PanelBrightnessLevel", 1);
    }
    
    private func setBacklight() {
        guard let fmc = device.fmc else { return }
        fmc.setBacklight(UInt8(backlight))
    }
    
    private func setScreenBacklight() {
        guard let fmc = device.fmc else { return }
        fmc.setScreenBacklight(UInt8(screenBacklight))
    }
    
    private func setOverallLedsBrightness() {
        guard let fmc = device.fmc else { return }
        fmc.setOverallLedsBrightness(UInt8(overallLedsBrightness))
    }
    
    private func setLED(_ ledId: Int, state: Bool) {
        guard let fmc = device.fmc else { return }
        fmc.setLed(ledId, state: state)
    }
    
    private func clearDisplay() {
        guard let fmc = device.fmc else { return }
        fmc.clearDisplay()
    }
    
    private func setFont() {
        guard let fmc = device.fmc else { return }
        fmc.setFont(selectedFont)
    }
    
    private func showTestPage() {
        clearDatarefCache()
        
        switch selectedTestPage {
        case "PREFLIGHT":
            setDatarefHex("AirbusFBW/MCDU1titleg", [0x20,0x20,0x20,0x50,0x52,0x45,0x46,0x4C,0x49,0x47,0x48,0x54,0x00]);
            setDatarefHex("AirbusFBW/MCDU1titlew", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00]);
            setDatarefHex("AirbusFBW/MCDU1label1w", [0x20,0x43,0x52,0x5A,0x20,0x20,0x20,0x20,0x20,0x20,0x4F,0x50,0x54,0x20,0x20,0x20,0x20,0x52,0x45,0x43,0x20,0x4D,0x41,0x58,0x00]);
            setDatarefHex("AirbusFBW/MCDU1label3w", [0x20,0x55,0x50,0x44,0x41,0x54,0x45,0x20,0x41,0x54,0x00]);
            setDatarefHex("AirbusFBW/MCDU1label4w", [0x20,0x20,0x42,0x52,0x47,0x2F,0x44,0x49,0x53,0x54,0x00]);
            setDatarefHex("AirbusFBW/MCDU1label5w", [0x20,0x50,0x52,0x45,0x44,0x49,0x43,0x54,0x49,0x56,0x45,0x00]);
            setDatarefHex("AirbusFBW/MCDU1label6w", [0x52,0x45,0x51,0x55,0x49,0x52,0x45,0x44,0x20,0x41,0x43,0x43,0x55,0x52,0x20,0x45,0x53,0x54,0x49,0x4D,0x41,0x54,0x45,0x44,0x00]);
            setDatarefHex("AirbusFBW/MCDU1label5g", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00]);
            setDatarefHex("AirbusFBW/MCDU1cont1b", [0x20,0x20,0x00]);
            setDatarefHex("AirbusFBW/MCDU1cont3b", [0x2A,0x00]);
            setDatarefHex("AirbusFBW/MCDU1cont6b", [0x20,0x20,0x20,0x20,0x00]);
            setDatarefHex("AirbusFBW/MCDU1cont1m", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x46,0x4C,0x33,0x39,0x30,0x00]);
            setDatarefHex("AirbusFBW/MCDU1cont1w", [0x2D,0x2D,0x2D,0x2D,0x2D,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00]);
            setDatarefHex("AirbusFBW/MCDU1cont2w", [0x3C,0x52,0x45,0x50,0x4F,0x52,0x54,0x00]);
            setDatarefHex("AirbusFBW/MCDU1cont4w", [0x20,0x2D,0x2D,0x2D,0x60,0x20,0x2F,0x2D,0x2D,0x2D,0x2D,0x2E,0x2D,0x00]);
            setDatarefHex("AirbusFBW/MCDU1cont5w", [0x3C,0x47,0x50,0x53,0x00]);
            setDatarefHex("AirbusFBW/MCDU1cont1g", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x46,0x4C,0x33,0x37,0x36,0x20,0x20,0x20,0x20,0x20,0x00]);
            setDatarefHex("AirbusFBW/MCDU1cont5g", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x47,0x50,0x53,0x20,0x50,0x52,0x49,0x4D,0x41,0x52,0x59,0x00]);
            setDatarefHex("AirbusFBW/MCDU1cont6g", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x48,0x49,0x47,0x48,0x00]);
            setDatarefHex("AirbusFBW/MCDU1scont5g", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00]);
            setDatarefHex("AirbusFBW/MCDU1scont6g", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x30,0x2E,0x30,0x34,0x4E,0x4D,0x00]);
            setDatarefHex("AirbusFBW/MCDU1cont3s", [0x20,0x41,0x20,0x20,0x20,0x20,0x42,0x00]);
            setDatarefHex("AirbusFBW/MCDU1cont4s", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x41,0x20,0x20,0x20,0x20,0x20,0x42,0x00]);
            setDatarefHex("AirbusFBW/MCDU1scont6b", [0x31,0x2E,0x30,0x4E,0x4D,0x00]);
            setDatarefHex("AirbusFBW/MCDU1scont4w", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x54,0x4F,0x00]);
            setDatarefHex("AirbusFBW/MCDU1scont5w", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00]);
            setDatarefHex("AirbusFBW/MCDU1spw", [0x47,0x50,0x53,0x20,0x50,0x52,0x49,0x4D,0x41,0x52,0x59,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]);
            break
            
        case "INIT":
            fallthrough
        default:
            setDatarefHex("AirbusFBW/MCDU1titles", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x32,0x33,0x00]); // "                      23"
            setDatarefHex("AirbusFBW/MCDU1titlew", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x49,0x4E,0x49,0x54,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00]); // "          INIT|         "
            setDatarefHex("AirbusFBW/MCDU1label1w", [0x20,0x43,0x4F,0x20,0x52,0x54,0x45,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x46,0x52,0x4F,0x4D,0x2F,0x54,0x4F,0x00]); // " CO RTE        FROM/TO"
            setDatarefHex("AirbusFBW/MCDU1label2w", [0x41,0x4C,0x54,0x4E,0x2F,0x43,0x4F,0x20,0x52,0x54,0x45,0x00]); // "ALTN/CO RTE"
            setDatarefHex("AirbusFBW/MCDU1label3w", [0x46,0x4C,0x54,0x20,0x4E,0x42,0x52, 0x7C, 0x00]); // "FLT NBR|"
            setDatarefHex("AirbusFBW/MCDU1label5w", [0x43,0x4F,0x53,0x54,0x20,0x49,0x4E,0x44,0x45,0x58,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x54,0x52,0x4F,0x50,0x4F,0x00]); // "COST INDEX         TROPO"
            setDatarefHex("AirbusFBW/MCDU1label6w", [0x43,0x52,0x5A,0x20,0x46,0x4C,0x2F,0x54,0x45,0x4D,0x50,0x20,0x20,0x20,0x20,0x20,0x47,0x4E,0x44,0x20,0x54,0x45,0x4D,0x50,0x00]); // "CRZ FL/TEMP     GND TEMP"
            setDatarefHex("AirbusFBW/MCDU1cont1b", [0x4E,0x4F,0x4E,0x45,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x45,0x48,0x41,0x4D,0x2F,0x45,0x44,0x44,0x4D,0x00]); // "NONE           EHAM/EDDM"
            setDatarefHex("AirbusFBW/MCDU1cont2b", [0x45,0x44,0x4A,0x41,0x00]); // "EDJA"
            setDatarefHex("AirbusFBW/MCDU1cont3b", [0x45,0x57,0x47,0x39,0x30,0x38,0x38,0x00]); // "EWG9088"
            setDatarefHex("AirbusFBW/MCDU1cont5b", [0x31,0x31,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x33,0x38,0x38,0x31,0x30,0x00]); // "11                 38810"
            setDatarefHex("AirbusFBW/MCDU1cont6b", [0x46,0x4C,0x33,0x35,0x30,0x2F,0x2D,0x34,0x38,0x60,0x20,0x00]); // "FL350/-48` "
            setDatarefHex("AirbusFBW/MCDU1cont3a", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00]); // "                     "
            setDatarefHex("AirbusFBW/MCDU1cont3w", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x49,0x52,0x53,0x20,0x49,0x4E,0x49,0x54,0x3E,0x00]); // "               IRS INIT>"
            setDatarefHex("AirbusFBW/MCDU1cont4w", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x57,0x49,0x4E,0x44,0x3E,0x00]); // "                   WIND>"
            setDatarefHex("AirbusFBW/MCDU1cont5w", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00]); // "                       "
            setDatarefHex("AirbusFBW/MCDU1cont6w", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00]); // "          "
            setDatarefHex("AirbusFBW/MCDU1cont3s", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00]); // "        "
            setDatarefHex("AirbusFBW/MCDU1scont5b", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00]); // "          "
            setDatarefHex("AirbusFBW/MCDU1scont6b", [0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2B,0x31,0x35,0x60,0x00]); // "                    +15`"
            setDatarefHex("AirbusFBW/MCDU1spw", [0x46,0x2D,0x50,0x4C,0x4E,0x20,0x44,0x41,0x54,0x41,0x4C,0x49,0x4E,0x4B,0x20,0x49,0x4E,0x20,0x50,0x52,0x4F,0x47,0x00,0x00,0x00]); // "F-PLN DATALINK IN PROG"
            break
        }
    }
    
    private func showAllGlyphs() {
        guard let fmc = device.fmc else { return }
        
        fmc.writeData([0xf2,0x22,0x00,0x20,0xc6,0x00,0x21,0x63,0x00,0x22,0xc6,0x00,0x23,0xc6,0x00,0x24,0xc6,0x00,0x25,0xe7,0x00,0x26,0xc6,0x00,0x27,0x29,0x01,0x28,0x4a,0x01,0x29,0x42,0x00,0x2a,0x42,0x00,0x2b,0xc6,0x00,0x2c,0x42,0x00,0x2d,0x42,0x00,0x2e,0x42,0x00,0x2f,0x42,0x00,0x30,0x42,0x00,0x31,0x42,0x00,0x32,0x42,0x00,0x33,0x42,0x00,0x34])
        fmc.writeData([0xf2,0x42,0x00,0x35,0x42,0x00,0x36,0x42,0x00,0x37,0x21,0x00,0x38,0x42,0x00,0x39,0x63,0x00,0x3a,0xc6,0x00,0x3b,0xa5,0x00,0x3c,0xc6,0x00,0x3d,0xe7,0x00,0x3e,0xc6,0x00,0x3f,0xc6,0x00,0x40,0x4a,0x01,0x41,0x42,0x00,0x42,0x42,0x00,0x43,0x42,0x00,0x44,0x42,0x00,0x45,0x42,0x00,0x46,0x42,0x00,0x47,0x42,0x00,0x48,0x42,0x00,0x49])
        fmc.writeData([0xf2,0x42,0x00,0x4a,0x42,0x00,0x4b,0x42,0x00,0x4c,0x42,0x00,0x4d,0x42,0x00,0x4e,0x42,0x00,0x4f,0x21,0x00,0x50,0x42,0x00,0x51,0x63,0x00,0x52,0x84,0x00,0x53,0xa5,0x00,0x54,0xc6,0x00,0x55,0xe7,0x00,0x56,0x08,0x01,0x57,0x29,0x01,0x58,0x4a,0x01,0x59,0x42,0x00,0x5a,0x42,0x00,0x5b,0xc6,0x00,0x5c,0x42,0x00,0x5d,0xc6,0x00,0x5e])
        fmc.writeData([0xf2,0x42,0x00,0x5f,0xc6,0x00,0x60,0xc6,0x00,0x61,0xc6,0x00,0x62,0xc6,0x00,0x63,0xc6,0x00,0x64,0xc6,0x00,0x65,0xc6,0x00,0x66,0xc6,0x00,0x67,0xc6,0x00,0x68,0xc6,0x00,0x69,0xc6,0x00,0x6a,0xc6,0x00,0x6b,0xc6,0x00,0x6c,0xc6,0x00,0x6d,0xc6,0x00,0x6e,0xc6,0x00,0x6f,0xc6,0x00,0x70,0xc6,0x00,0x71,0xc6,0x00,0x72,0xc6,0x00,0x73])
        fmc.writeData([0xf2,0xc6,0x00,0x74,0xc6,0x00,0x75,0xc6,0x00,0x76,0xc6,0x00,0x77,0xc6,0x00,0x78,0xc6,0x00,0x79,0xc6,0x00,0x7a,0x42,0x00,0x7b,0x42,0x00,0x7c,0x42,0x00,0x7d,0xc6,0x00,0x7e,0x42,0x00,0xc2,0xb0,0xc6,0x00,0xe2,0x98,0x90,0x42,0x00,0xe2,0x86,0x90,0x63,0x00,0xe2,0x86,0x91,0x84,0x00,0xe2,0x86,0x92,0xa5,0x00,0xe2,0x86,0x93,0xc6])
        fmc.writeData([0xf2,0x00,0xce,0x94,0xc6,0x00,0xe2,0xac,0xa1,0xc6,0x00,0xe2,0x97,0x80,0xc6,0x00,0xe2,0x96,0xb6,0xc6,0x00,0xe2,0x96,0x88,0xc6,0x00,0xe2,0x96,0xb2,0xc6,0x00,0xe2,0x96,0xbc,0xc6,0x00,0xe2,0x96,0xa0,0xc6,0x00,0xe2,0x96,0xa1,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00])
        fmc.writeData([0xf2,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00])
        fmc.writeData([0xf2,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00])
        fmc.writeData([0xf2,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x42,0x00,0x20,0x8c,0x01,0x20,0x31,0x02,0x21,0xce,0x01,0x22,0x31,0x02,0x23,0x31,0x02,0x24,0x31,0x02,0x25,0x31,0x02,0x26,0x31,0x02,0x27,0x94,0x02,0x28,0xb5,0x02,0x29,0xad,0x01,0x2a,0xad,0x01])
        fmc.writeData([0xf2,0x2b,0x31,0x02,0x2c,0xad,0x01,0x2d,0xad,0x01,0x2e,0xad,0x01,0x2f,0xad,0x01,0x30,0xad,0x01,0x31,0xad,0x01,0x32,0xad,0x01,0x33,0xad,0x01,0x34,0xad,0x01,0x35,0xad,0x01,0x36,0xad,0x01,0x37,0x8c,0x01,0x38,0xad,0x01,0x39,0xce,0x01,0x3a,0x31,0x02,0x3b,0x31,0x02,0x3c,0x31,0x02,0x3d,0x31,0x02,0x3e,0x31,0x02,0x3f,0x31,0x02])
        fmc.writeData([0xf2,0x40,0xb5,0x02,0x41,0xad,0x01,0x42,0xad,0x01,0x43,0xad,0x01,0x44,0xad,0x01,0x45,0xad,0x01,0x46,0xad,0x01,0x47,0xad,0x01,0x48,0xad,0x01,0x49,0xad,0x01,0x4a,0xad,0x01,0x4b,0xad,0x01,0x4c,0xad,0x01,0x4d,0xad,0x01,0x4e,0xad,0x01,0x4f,0x8c,0x01,0x50,0xad,0x01,0x51,0xce,0x01,0x52,0xef,0x01,0x53,0x10,0x02,0x54,0x31,0x02])
        fmc.writeData([0xf2,0x55,0x52,0x02,0x56,0x73,0x02,0x57,0x94,0x02,0x58,0xb5,0x02,0x59,0xad,0x01,0x5a,0xad,0x01,0x5b,0x31,0x02,0x5c,0xad,0x01,0x5d,0x31,0x02,0x5e,0x31,0x02,0x5f,0x31,0x02,0x60,0x31,0x02,0x61,0x31,0x02,0x62,0x31,0x02,0x63,0x31,0x02,0x64,0x31,0x02,0x65,0x31,0x02,0x66,0x31,0x02,0x67,0x31,0x02,0x68,0x31,0x02,0x69,0x31,0x02])
        fmc.writeData([0xf2,0x6a,0x31,0x02,0x6b,0x31,0x02,0x6c,0x31,0x02,0x6d,0x31,0x02,0x6e,0x31,0x02,0x6f,0x31,0x02,0x70,0x31,0x02,0x71,0x31,0x02,0x72,0x31,0x02,0x73,0x31,0x02,0x74,0x31,0x02,0x75,0x31,0x02,0x76,0x31,0x02,0x77,0x31,0x02,0x78,0x31,0x02,0x79,0x31,0x02,0x7a,0x31,0x02,0x7b,0x31,0x02,0x7c,0x31,0x02,0x7d,0x31,0x02,0x7e,0xad,0x01])
        fmc.writeData([0xf2,0xc2,0xb0,0x31,0x02,0xe2,0x98,0x90,0xad,0x01,0xe2,0x86,0x90,0xce,0x01,0xe2,0x86,0x91,0xef,0x01,0xe2,0x86,0x92,0x10,0x02,0xe2,0x86,0x93,0x31,0x02,0xce,0x94,0x31,0x02,0xe2,0xac,0xa1,0x31,0x02,0xe2,0x97,0x80,0x31,0x02,0xe2,0x96,0xb6,0x31,0x02,0xe2,0x96,0x88,0x31,0x02,0xe2,0x96,0xb2,0x31,0x02,0xe2,0x96,0xbc,0x31,0x02])
        fmc.writeData([0xf2,0xe2,0x96,0xa0,0x31,0x02,0xe2,0x96,0xa1,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad])
        fmc.writeData([0xf2,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad])
        fmc.writeData([0xf2,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xad,0x01,0x20,0xaf,0x01,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00])
    }
}

#Preview {
    // Create a mock device for preview
    let mockDevice = WinwingDevice(
        id: 0,
        name: "Mock FMC",
        type: .fmc,
        productId: 0x1234,
        isConnected: true
    )
    
    FMCControlView(device: mockDevice)
}
